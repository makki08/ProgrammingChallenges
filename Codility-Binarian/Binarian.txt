A non-empty zero-indexed array A consisting of N non-negative integers is given. its binarian is defined as:
binarian(A)=pow2(A[0])+pow2(A[1])+....+pow2(A[N-1])
where pow2(K)=2^k

For example, the binarian of array A such that:
A[0]=1
A[1]=5
A[2]=4

equals 50:

Write a function:

class Solution { public int solution(int[] A);}

that, given an array A consisting of N non-negative integers, returns the length of the shortest array that has the same binarian as array A.

For example, given an array A such that:
A[0]=1
A[1]=0
A[2]=2
A[3]=0
A[4]=0
A[5]=2

the function should return 3 because:

-the binarian of A is 13,
-array B such that b[0]=3, b[1]=2 and b[2]=0 also has a binarian of 13,
-there is no shorter array with a binarian of 13.
Assume that:

-N is an integer within the range `[1..100000]`;
-each element of array A is an integer within the range `[0..10000]`.
Complexity:

-expected worst-case time complexity is O(N*log(N));
-expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Elements of input array can be modified.  
